 hey good morning so I'm on this side so today we are gonna go through the entire
 process of me vibe coding the sass that I launched last week so I'm still trying
 to figure out how I can make this video compact enough for it to be useful but
 yeah maybe it will be a little lengthy but I guess that's okay because there's
 much to talk about so there's this there's just the first attempt I made at
 at fully launching a product like there is a difference between you know a lot
 of those experiments that I do on the weekends or tons of people out there are
 doing like small applications where you have only the web app like if you're
 building with lovable or any of these UI related app building tools then you get
 mostly the UI or maybe you are tinkering with something where you can build on
 the back end but then it's not a complete full stack product like what I'm
 talking about is to build a full stack product in this case this is a micro
 there's a micro sass so software as a service so this is meant for like to be
 a b2b sass but I'm just playing around with lots of ideas is just one of those
 ideas it doesn't have to be this part could be anything to be honest and I
 have other products I try and I'm going to create other videos around them but
 what is important is the workflow and I'm trying to refine that workflow it's
 still it's still a work in progress and I think I have something which kind of
 works right now it has a mix of things like including voice annotations that I
 take where I describe the work that where I describe the user flow or the
 data flow of a project and then I ask Claude or Gemini or some other AI tool
 to clean it up you can do it also through the web tools but having the
 terminal based tools is probably the best if you are focused on building a
 software project because in a software project you will have to get down to the
 terminal anyway so you will have to either test your product which means in
 it you need to run some of these systems and to run them you kind of need to run
 like node NPM or Python like some Python tooling or you know anything else like
 Ruby whatever else that you are using to to build the back end or the front end
 of your project you will need to run those or maybe a database right you need
 to connect to a database so it's best to kind of start there because you will
 have to come to it sooner than later and when your project is a little bigger
 coming to some of these things which may be like roadblocks either in your
 learning or in your mindset will only allow you later on so only be
 frustrating but if you start with them now you start with them from the
 beginning then you kind of clear your path and then it makes it easy for you
 to focus on the features that you want to build for initially the minimum viable
 product of course I'm not saying that go crazy and build everything all at once
 don't build big products really please don't please like the ideas of software
 engineering or the ideas of product building ideas of I think startups they
 don't really go away when you use AI to generate code like they still stay they
 are your anchors they are your grounding rules it's just that you're using large
 language models to generate most of the code particularly in the MVP stage
 because you want to fast iterate so let's look at that what is this product
 that I created it's called let's order so I have I booked the domain let's
 order dot app and this as you can see the screenshots things are live this
 actually live you can go and people have actually played around the the demo
 works so there's the admin side there is the menu side we'll go through all of
 them and there's the back end and there's the entire deployment of all the
 whole stack let's say right the whole full stack project okay so if I launch
 the demo I go straight into this I may have a I may encounter bugs during this
 by the way video recording that's totally okay I mean it's it's a live
 software I have not thoroughly tested I still have friends who are sending me
 hey there is this glitch here or there so that happens that's okay but here the
 idea is to go through this to understand how I did not write the code I am a
 software engineer I did not write the code I don't even review the code
 anymore but I got a full working full stack SAS micro SAS deployed and live and
 now like it's live people have already gone ahead and tested it so this is the
 demo user and password so it's manager and example.com as you can see and
 password one two three very stupid password that's okay we are going to
 this was just generated by the LLM and I can change it later on that's fine but
 yeah so this is this restaurant here I cleaned out the data already and there
 is a data cleaning script that cleans it out every once in a while I don't know
 if it is working I should double check it but yeah people do come in I have
 seen really really vulgar words on the demo and that's okay that happens when
 you have a you know public demo available to people they will sign in
 and they will put in random shit that's okay so what do we have here we have a
 table management as we can see we have a restaurant right we have this restaurant
 particularly this is a restaurant that I actually like this is in Kolkata so I go
 and eat there I know it so there is a link to the Google Maps of Google Maps
 URL of that restaurant if you click on it it'll just take you there but yeah
 this was just manually entered as you can imagine you can create a restaurant
 but we are not going to look into like the the working of this application we're
 going to see how how we build that application through AI but just want to
 cover the basics here so you can add our edit tables like as you can imagine
 front row center I mean I I don't really know how you name tables in a restaurant
 I need to talk to people I have not done that yet sorry for that but yeah as you
 think as you can imagine maybe you know just front row and then center left
 right whatever the table names right and then each of them have a QR code so this
 QR code this is being generated by the back end all of this data also is saved
 managed everything is done by the back end all the authentication and
 everything all managed by the back end we'll look into those things but yeah
 just want to walk through like this is the QR code this is basically the URL
 say if you scan this QR code I can probably show this to you right now by
 scanning it on my phone but you can also do it from this video itself maybe the
 scan works but yeah if you scan this just pause the video and scan it I think
 it will work what you will get is that you will be able to go to this
 particular URL so this URL if I now copy it and if I paste it into the browser
 this is what I get so I'm by the way I'm on the right hand side I'm always
 opening the console this is just a habit because I need to see errors as I'm
 testing so I just have it open all the time you don't need to but yeah once you
 start building software it'll also probably become your habit I have two
 separate browsers just my daily practice I have a Firefox for my daily actual use
 so this is where like right now I'm marketing about let's order this
 application everywhere so I'm just keeping a tab on reddit but yeah this is
 where my general stuff happens like daily you know browser for a founder
 slash engineer this is my testing so this is Chrome and this is my testing
 browser this is where all the tabs are basically the websites as they are I'm
 testing locally so all of them are being run locally except for this one that I'm
 recording now in this video this is live from the website okay let's order dot
 app okay so as you can see this URL is m dot let's order dot amp while this one
 was a dot so a dot is for admin m dot is for menu these are two separate
 applications we'll go through them just to give you and just to give you the
 overview okay now that we have these let's come to the actual prompting like
 there is no one prompt okay there's something that I want to understand that
 that I want you to take away there's no one prompt yeah we are doing vibe coding
 but that is just taking that essence like Andre says I know the the person
 who coined the term on the carpet he who's like from open AI originally he
 you know the idea team of by putting is that you give in to large language
 models you don't look at the code you don't you don't tell you don't review
 the code you kind of believe in them to do the right things and you can do that
 with also developer teams right like I am an engineer I've been hired many
 times to build teams across you know the across the world and and the founder or
 the company who's hiring me has to have that faith in me but that does not mean
 that I cannot go wrong same principles apply like in the in a hierarchy in a
 startup or in a company I'm the one maybe if I'm the engineering head I'm
 the one who's going to take onus of like okay whatever gets done whatever gets
 launched has to be bug free or we'll try our best etc etc within a set of
 constraints remember that when you're doing AI generated putting you also have
 a set of constraints one of those constraints is simply the limits of the
 large language models and I think people keep forgetting this because I see a lot
 of posts where they are expecting too much when human beings cannot deliver
 those constraints like we cannot and I have seen I've been in software
 engineering for 16 years we fail at software like shamelessly and I think
 this is something that we need to talk about is that do not expect it to do
 everything that we have been doing and it has taken us like 40 50 years now and
 we still have a mess of programming languages and frameworks and and whatnot
 so yeah it will take us some time what it gives us is an amazing power
 particularly because I am somebody who cares about who has always cared about
 so this so this idea that non technical people could build software is something
 that I've chased for a very long time before AI driven development was here
 I've been chasing it and for an instance as an example I own this domain called
 nocodo.com nocodo as in for no code from 2013 and this is because I have
 chased this idea that we could come up with ideas and we could build out
 projects or software projects without knowing how to do software engineering I
 think I finally feel we are almost going to be there and yeah sure it needs the
 prompting to be done in a certain structure but what I'm going to show you
 is not too much structure and you will see that so firstly the first let's see
 the first prompt that I have started this project with so if I go to github
 by the way this entire project all the documentation that was generated out of
 the prompts that I've given sadly enough the prompts are not here I'm still going
 to see if I can just you know put the prompts here maybe I can extract the
 history from plot code and just you know publish it here maybe that will work so
 that will be great for everybody but just for context all the original stuff
 that I have put in which are mostly through either files like actual files
 which are saved in this repository or issues in this repository so I add
 comments or I add maybe the first issue and then I expand then I tell plot code
 to expand those issues into many tickets etc etc those are all available here so
 let's start with the project overview that's where I started so I started and
 I created this first part of the project so let me open this in an editor locally
 by the way just for reference it's just going to make my life a bit easier so
 project overview this is the same thing as you're seeing on github not different
 but what this is is the first few paragraphs where where how I described
 what is let's order so just let's read through a few sentences let's order the
 hash is the heading if you have used markdown syntax and you would probably
 know if not then that basically become renders as the HTML heading as you see
 this is becoming a heading here and that's the hash okay so complete menu
 management browsing and ordering app for restaurants and guests fairly easy simple
 to understand I guess like one-liner overview let's order has two main types
 of users restaurant managers and guests who come to eat or drink guests do not
 need to log in they see the menu as planned by restaurants manager they can
 select items see their order modify order and place it okay fairly easy to
 understand so that so basically there are users normal users who are like
 guests who can come see a menus restaurant depending on the table
 there will be a QR code on the table you scan it you can see the menu order done
 and then on the restaurant side the restaurants can be created by any user
 after email password based registration or login restaurant data including menu
 can be viewed or updated only after authentication okay so the restaurant
 managers have to authenticate but guests do not fairly easy to understand I guess
 right then I put in a few of these bullet points these are by the way
 bullet points as you can see on github when it is rendered this becomes bullet
 points I can also show you in this editor this is a preview and these
 becomes bullet point okay so restaurants menus restaurants menu is available
 through QR code on the table that links to a URL like M slash so M slash unique
 URL unique restaurant and table code so each restaurant and table combination
 will have a unique code okay that's something I wanted basically what how I
 was thinking through when I was thinking of this product is that a table can can
 basically automatically be tracked if the URL is unique right that was my
 thinking process and it still is how I am thinking about this product it's it's
 a fair simple way to I think think that I go to a restaurant there are many
 tables but where did the order come from okay the the QR code which is bound to
 the URL already has you know unique signature for the table and the
 restaurant which means done you know like now the restaurant manager can
 easily of course the the order information comes only to this
 restaurant not to some other restaurant for sure that makes sense but even
 within that restaurant the order comes from which table that is automatically
 tracked because we know because of that URL okay each table room will have a
 unique URL with the same menu the menu right now is same but yeah my future
 thoughts are like I could allow a restaurant to have different menus like
 imagine so two kinds of different menus imagine that menus within the rooms
 now let's say a restaurant is within a hotel restaurants with with the
 restaurants part of a hotel could have a different menu for in-room service and
 could have a different menu for the restaurant which is just you know go out
 there and eat in say a common room right common eating restaurant I don't know
 how you turn those but yeah you get the idea so the menus could be different
 also the menus could be different depending on different times of the day
 or different seasonalities right so breakfast menu in the morning maybe
 you're running I don't know some special buffet or something like that yeah the
 menu could be different and why have the user bother through you know I don't
 know three thirty pages of all menus instead you scan and you're looking at
 only the menu of stuff that is available now right so that makes it so much
 easier so yeah you can imagine that those features can come in in the future
 but I have not added them so right now it's very simple but yeah this gives you
 an overview of like what is menu and then ordering I'm just gonna skip over
 some of those points but yeah please feel free to go to this URL and read
 them for yourself they'll give you a very like much better idea of what was
 the intent to build this project and how the building happened then registration
 or registering a restaurant so user needs to authenticate with bla bla user
 like email password phone number etc then there are two managers are needed
 okay so basically you authenticate you are the first person you sign up and
 then you give like kind of an invite link to another person okay the
 restaurant's name address establishment here are needed and picture and link to
 phone Google Maps is also needed okay so picture right now is needed but as you
 saw in the demo I don't know if you noticed it there is no picture so even
 in that mean there is no picture and this is something that can happen so
 this high-level description that I've created sometimes when I create tickets
 out of it the actual work tasks out of it which we will see it's not necessary
 that I'll keep everything in check sometimes I will forget sometimes LLM's
 will forget context and these things happen but these things happen also in
 real life if you have ever managed a software engineering project or software
 development project you know that this happens okay so there is nothing special
 here that for example hey this was listed here but it didn't get done yeah
 that happens I it's my mistake it's also the large-language models mistake maybe
 to do not kind of create issues around them but I'll show you also it's not
 that hard to kind of go through the entire project existing GitHub issues
 pending GitHub issues and then ask a model hey refer to this document and go
 clean up and figure out what is not done right so those kind of things can be
 done menu management against you know feel free to pause and read these and
 then technical preferences so the technical preferences is a little more
 interesting here because this is not something I this there's something I
 don't imagine everybody will do this is something I did simply because I just
 you know I've been writing in rust for the last two years I've been working
 with Python for the last you know for the ten years before that and PHP for
 like the six seven years before Python and yeah JavaScript and and typescript
 for I don't know countless number of years the thing is that I really like
 writing in rust simply because for these things I mean it's an overkill some
 people might say but that's not the point the point for me is that I liked
 when the API's are typed for those who understand this the API in payloads are
 typed and both sides the languages are typed it just kind of reduces the error
 possibilities let's say and this is nothing else out of the languages of
 course there are so many other features that these languages give particularly
 the combination of rust and typescript but I'm mostly focused on this because
 all I'm trying to do is create prototypes like I'm not trying to create rocket
 signs here okay very simple business applications very simple and these MVPs
 very simple prototypes this you could get done also with Python and type hints
 so I guess pydantic and you know and a bunch of Python type hints etc but rusts
 like tooling really helps with making sure that your entire software
 particularly the back end is strongly typed as typed as rust needs it and at
 the same time there are lots of these I would say very ergonomic ways you know
 I'm not a programming science you know I don't know doctorate to explain to you
 right now in the best way possible but basically what I'm looking for is how
 well do you describe you describe your business case in the language itself and
 this rust does very well because of its structs and enums and how enums can have
 structs and the other way around it really helps you basically the
 nomenclature of your kind of your grammar that you build out of your types
 resembles closely what your business needs and there's something I really
 really like it's extremely verbose sure it feels a little too much sometimes but
 it's extremely closely matching what I want the business like what I what in my
 mind the business is doing so that to me is I don't know it's a very power
 feature I really like it and it it also drives errors down it also helps me
 negotiate with the software later on it in my mind particularly with AI coding
 it improves maintainability that's at least in theory in my mind I've been
 trying this for a while it has it has just been really good so that's why some
 of these technical preferences exist solid.js it's just a smaller framework
 than react it also comes a little more bundled solid has its own router its own
 state management I just prefer it tailwind because yeah everybody knows
 why tailwind I guess and yeah that's mostly so what I what I like to do is
 that there are three applications on the front end there is the there's a
 marketing application so this is this there's the marketing application okay
 sorry this is not the marketing sorry so sorry this is the menu application which
 is built in astro astro is more for content websites like it's not really a
 full you know you wouldn't build a single page application in astro I guess
 you can but it's more for content websites it's really great for these
 small one page you know ecommerce checkout type websites or full-fledged
 like blog content websites so this fit really well because I like it to be
 minimal and solid.js for the restaurant management application like I said I
 just prefer solid.js over react but that's about it so these technical
 preferences will come to this later on in a separate video that you don't
 really have to know your preference you don't even have to have technical
 preferences there are easy prompts you can ask depending on your project like
 what are the tools and you can just go ahead and check them yourselves a few
 things but there are a few little things that you want to be done like I said it
 is the is the API payload are the API payloads typed like the JSON that goes
 back and back and forth mostly going as a post request or put request are they
 typed as in is it possible that typescript the the typescript side of it
 in the browser when they accept it or when they send something are they typed
 by the backend so there is somewhere where there's a little bit of grounding
 happening okay and this you can literally generate through LLMs very
 easily any programming language most backend programming languages do allow I
 believe to generate the types in my case rust I do get this feature through a
 crate called TSRS and it allows me to generate the typescript types will show
 this later on and that brings down the errors like I said improves the
 maintainability as we add features etc later on okay database I chose a very
 simple one so it asked okay hang on sorry so till this point this is all me
 okay then what I asked Claude was hey go through project overview so that's it
 I'll show it to you I'll show it to you live let's copy this right now okay
 copied and I'll show it to you right now I'm using warp by the way this is just
 another terminal based this is a terminal based software just like Claude
 code but yeah it's it's a different software and it allows using different
 models like multiple models not just Claude okay so we are going to create a
 project let's say let's let's say menu qr order let's a QR order qr and order qr
 and order what I'm whatever qr an order I'm going to do nano project overview
 dot MD I'm going to paste this okay done that's it let's look at it so LS - LH in
 this directory there's nothing else then I'm going to look at this and that's it
 now what I'm going to do is I'm going to simply change this to QR and order in
 case I don't know you know why not just being pedantic I guess okay so then what
 I do is I ask it so here I can switch between command mode like the normal
 terminal commands and asking AI mode I just switched to that I can use many of
 the models that it supports by the way I'm just using Claude for why not I
 don't see GPT-5 oh I see GPT-5 let's just try it why not okay please read
 read project overview and update it with clarifying clarification questions which
 I can answer before we build this project let's see just you know why not
 let's just see
 okay in the meanwhile I'm going to open my text editor here my editor rather my
 software editor just so that we can see this while it is doing okay so it says I
 will update by appending structured clarification questions section great
 okay while it is doing so I will just go through this okay so this is back to our
 original project the one that is live so here it asked a bunch of questions
 remember the same prompt that was that easy that prompt was that easy okay and
 yeah a bunch of questions further questions and I usually do this like two
 or three times okay plus different models and you will see that the projects
 act the the questions actually give you a lot to think about is very important
 like hey how do you want people to verify with you who will be the very
 fine you know whatever what are the ways to verify what are the documents you're
 looking for you know how do people interact with your project blah blah
 blah okay and this really helps you to think through the entire process of this
 project building like what are the main points who are the users who are how are
 they going to interact with your product etc etc okay so now let's just quickly
 check if it has finished it says it says it has finished okay so clarification
 questions product scope and users are there multiple restaurant tenants on one
 deployment such an interest such an important question think about it right
 yes is this a multi basically all it is asking is this a multi-tenant SAS yes it
 is I am trying to build a multi-tenant SAS when multiple restaurants would
 become each like single tenant and is just phenomenal because I didn't I
 didn't mention it right I mean okay phenomenal is too too big a word for this
 but yeah you get the point right you have something to kind of ping-pong with
 and they have seen tons of patterns so they have seen these SAS patterns or
 these software patterns that they're going to ask you questions which are
 important for you to maybe think because either you have left out some technical
 description or some product description right some of those clarity are simply
 not there so this is part of my just regular workflow when I'm building
 software okay so again pause this read this if you want to and most importantly
 try this like I said you know copy the first part even if you are you know even
 if you don't want to create your own project document don't just copy the
 first part you can leave other technical preferences also ask about technical
 preferences by the way I can give you some generic stuff and then you can ask
 but that's the most important thing I want you to get a hang of keep asking
 like be more detail-oriented keep asking and you will see that just from your
 computer just from that interaction you'll get a really nice so I will be if
 I answer these questions I'm sure this document will become richer and richer
 okay so that's the that's the first step what is the second step the I'm going to
 not continue this by the way so I'm going to just stop it that's okay so what
 is the second step the second step is let's say we have done this now the
 second step is something what I was doing till now it has actually changed
 quite a bit I was writing more of this documentation or I was asking Claude or
 Gemini CLI or whoever to to expand these and to be basically build the specs so
 if you if you go into this project like the one that is already live you'll see
 that there is a deployment related documentation there is an admin work
 plan documentation there is a work plan documentation there's a technical
 overview documentation these are all generated by Claude good let's walk
 through the first one that I remember I had gotten it to create is the work plan
 the work plan is basically what I do is with this high level overview I ask
 Claude hey create me the tickets I'll show you it'll be a bit hard to show you
 because I think that prompt is way back in my history let's see let's try okay
 Claude let's see if I can find that for you by the way one thing if you want to
 notice most of my prompts I'm just increasing the font size most of my
 prompts are really really super simple okay just as how you would imagine
 talking to your fellow developers if you're managing a team just those so I
 refer everything in tickets I go ticket by ticket all of these are github issues
 which is why if you go to github just to you know show it to you if you go to
 github if you go to it issues just go to the closed issues and you will see them
 I mean there are 60 of them right that's the whole work that was done to get this
 like this project live in 12 days 12 days in a matter of 12 days all of this
 was life okay so all of this was built and live and just to give you also a
 sense of reference I believe there is this software to check the line count I
 forgot what software I have it installed
 we'll we'll come to this just to give you a sense of so this clock
 I think I have another one which is not clock and trying to find that out
 okay I have to pause this video just to get okay now I got it so it's called
 tokay tokay I have it installed that is why I was looking for it and I kind of
 so I'm gonna exclude JSON file simply because this project has a lot of the
 the SQL management library that is in the back end it creates a bunch of JSON
 files I don't really know why I read the documentation but then I forgot so we
 are going to exclude those files and this is how large this project currently
 there are 8,000 lines of rust 8,700 code code I believe is in so let's count only
 the code lines so 7,300 lines of rust code there are I'm sure high fairly high
 number yes so 3,000 lines of typescript code and then TSX is the typescripts the
 template syntax okay that's the syntax from react it's used by all Solages and
 that is another six thousand five hundred so that's it that that's a lot
 I'm not even counting YAMLs I don't care so you can exclude YAMLs because yeah
 they are just configurations and stuff like that I don't care yeah and did it
 not yeah it did exclude YAML but there is another line of YAML somehow okay
 fair enough so now you can see that the total lines have come down from 22,000
 lines of code to 19,000 19,000 lines of code were created and deployed and it is
 live and it works so if this that's the main reason I'm talking about vibe
 coding is that if you follow the structured approach then you get enough
 for the lines of the like the counter lines of code is absolutely bullshit it
 does not count but I just wanted to show you that that is a lot of man-hours
 that's why to me is important because I have been an engineer I know what I'm
 doing with when I'm building with AI right and basically not going to be able
 to build to you if any of you people watching this are like oh I want
 Sumit's talent but yeah how do you how do I build myself now when I'm generating
 all this through AI I cannot okay that at least not for those hours that I used
 to code this manually you can imagine 19,000 lines of code is not easy for a
 human being to code it's probably I don't know maybe two and a half months
 maybe two months of work I got it done in 12 days okay so can I get those
 original that original ticket let's see let's just scroll up no the history just
 goes that far and no no more beyond but yeah I'll what what you can probably see
 is that most of my work depends revolves around github and the issues for
 example github shows CI CD errors we'll get to those in a later video but those
 also I ask it to fix so literally I just follow github I just follow like gate
 there are a few software engineering patterns and my prompts are small this
 prompt literally the structure of this prompt this is exactly what I use all
 the time and to like show it to you this is how it is currently I have a prompt
 for each and every tool that I use of clod code warp because well some of them
 have issues in something so I just create a then I have quen so I have like
 basically templates for each one of them all I do is mostly change the ticket
 numbers the issue number the issues were themselves created with with github
 sorry with clod code and for that what I usually prompt is like hey look at this
 read me so if we were to go back to that project that we created you know let's
 see then we go to projects and then we go to QR order right and then what I
 would do is let's see if I choose GPD 5 please read let's see if I can get that
 please read project overview and create an MVP dot MD focusing only on the
 minimum viable product I should build please yeah let's see so you can do
 things like this so like you can create one file from another you can actually
 ask it to go to github if this project is on github to just go ahead and create
 the issues for you so each issue is like the one that you saw when you go and go
 to this if you look at the first issue this was issue number one this issue was
 not created by me was not worked upon by me this issue was created by AI by I
 believe clod code let's see oh sorry can I see who created who closed this oh it
 seems like I don't have a link maybe back then it was not as structured as I
 want to let's see if I can yeah this one for example no these are just references
 sorry yeah these are just references what I want is let's go here so pull
 requests are how I get the work done so pull requests are how the work gets
 published and then I test in a particular branch we'll explain all of
 these in next tickets sorry next videos but just to look at one of those pull
 requests let's say something got implemented implement comprehensive
 authentication system so this is what AI gets done I review it in this particular
 branch so there's a branch here I move to that branch or that branch locally is
 already moved into because AI was working on that branch I test it I'm
 happy this pull request is merged online I pull the code back into my main branch
 main branch is where things are supposed to be like in a production friendly
 state let's say okay fair enough that's enough overview gossip I guess I mean I
 mean you can you can imagine the point that I'm trying to get to right it's
 just that with some of these tools it's mostly very light work around of course
 we need some engineering understanding but it's mostly fairly light prompting
 to get to the project being distilled the more you distill the more you know
 issues tasks whatever small things you break it into the easier it is to
 achieve see it has done a fairly good job it has broken down into steps I
 could have asked it to do it via github so this would be even cleaner easier to
 see easier to manage but you get the idea okay so that's for the first video
 this is going to be a chain of videos just focusing on this project and I hope
 that you know I can motivate more of you to get get started just get experimenting
 particularly if you're a non engineer get experimenting I like trust me the
 like the more you do it even if you try it for five six days you'll feel so at
 home particularly in the terminal that you will want to keep doing it and you
 will produce great results like first start off with static websites and then
 go into dynamic websites and you will see in a month's time you'll be able to
 create full-fledged MVPs and launch them by the way I'm hosting a session this
 week and and the coming weeks so track me on my web on my personal website
 there's a link to my luma sessions thank you thanks for watching
