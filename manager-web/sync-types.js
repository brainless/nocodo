#!/usr/bin/env node
/**
 * sync-types.js - Syncs TypeScript types generated by ts-rs from manager/bindings
 * to manager-web/src/types/generated/
 */

import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const BINDINGS_PATH = path.join(__dirname, '../manager/bindings');
const TARGET_PATH = path.join(__dirname, 'src/types/generated');

async function syncTypes() {
  try {
    console.log('üîÑ Syncing TypeScript types from Rust bindings...');
    
    // Ensure target directory exists
    await fs.mkdir(TARGET_PATH, { recursive: true });
    
    // Read all .ts files from bindings directory
    const files = await fs.readdir(BINDINGS_PATH);
    const tsFiles = files.filter(file => file.endsWith('.ts'));
    
    console.log(`üìÅ Found ${tsFiles.length} TypeScript binding files`);
    
    // Copy each .ts file to target directory
    for (const file of tsFiles) {
      const sourcePath = path.join(BINDINGS_PATH, file);
      const targetPath = path.join(TARGET_PATH, file);
      
      const content = await fs.readFile(sourcePath, 'utf-8');
      await fs.writeFile(targetPath, content);
      
      console.log(`  ‚úÖ ${file}`);
    }
    
    // Generate index.ts to re-export all types
    const indexContent = tsFiles
      .map(file => {
        const name = path.basename(file, '.ts');
        return `export * from './${name}';`;
      })
      .join('\n') + '\n';
    
    await fs.writeFile(path.join(TARGET_PATH, 'index.ts'), indexContent);
    console.log(`  ‚úÖ index.ts (barrel export)`);
    
    console.log('‚ú® Type synchronization complete!');
    
  } catch (error) {
    console.error('‚ùå Error syncing types:', error.message);
    process.exit(1);
  }
}

syncTypes();
