name: Web CI

on:
  pull_request:
    paths:
      - 'manager-web/**'
      - '.github/workflows/web-ci.yml'
  push:
    branches: [main]
    paths:
      - 'manager-web/**'
      - '.github/workflows/web-ci.yml'

env:
  NODE_VERSION: '20'

jobs:
  # Type checking
  typecheck:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./manager-web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npm run typecheck

  # Code formatting check
  format:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./manager-web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting with Prettier
        run: npm run format:check

  # Linting
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./manager-web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  # Unit tests
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./manager-web
    strategy:
      matrix:
        node-version: ['18', '20', 'lts/*']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.node-version }}
          path: manager-web/coverage/
          retention-days: 7

  # Security audit
  audit:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./manager-web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Check for known vulnerabilities
        run: npm audit --audit-level high

  # Build verification
  build:
    runs-on: ubuntu-latest
    needs: [typecheck, format, lint, test]
    defaults:
      run:
        working-directory: ./manager-web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed: dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "Build failed: index.html not found in dist"
            exit 1
          fi
          echo "Build verification passed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: manager-web-dist-${{ github.sha }}
          path: manager-web/dist/
          retention-days: 7



  # Dependency validation
  validate:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./manager-web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Validate package.json
        run: |
          # Check if package.json is valid JSON
          cat package.json | jq empty
          echo "package.json is valid JSON"

      - name: Check package-lock.json integrity
        run: npm ci --dry-run

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated packages
        run: npm outdated || true

      - name: Validate TypeScript configuration
        run: |
          npx tsc --showConfig > /dev/null
          echo "TypeScript configuration is valid"
