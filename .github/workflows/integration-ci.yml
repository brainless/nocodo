name: Integration CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    # Run integration tests weekly on Sundays at 02:00 UTC
    - cron: '0 2 * * 0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  NODE_VERSION: 'lts/*'

jobs:
  # Full workspace build and integration
  full-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install mold linker
        run: |
          sudo apt-get update
          sudo apt-get install -y mold

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: integration-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build Rust workspace
        run: |
          cargo build --release --workspace --verbose
          cargo test --workspace --verbose

      - name: Build Web application
        working-directory: manager-web
        run: |
          npm ci
          npm run typecheck
          npm run lint
          npm run test:run
          npm run build



      - name: Verify Web build
        run: |
          test -d manager-web/dist
          test -f manager-web/dist/index.html
          echo "Web application built successfully"

  # Cross-component validation
  component-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install mold linker
        run: |
          sudo apt-get update
          sudo apt-get install -y mold

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: component-integration-${{ hashFiles('**/Cargo.lock') }}

      - name: Check workspace dependencies
        run: |
          cargo tree --workspace
          cargo check --workspace --verbose

      - name: Validate shared types between components
        run: |
          # Check if ts-rs generated types are up to date
          cargo test --workspace --verbose
          echo "Type generation validation passed"

      - name: Check for circular dependencies
        run: |
          # Verify no circular dependencies in Cargo workspace
          cargo check --workspace --all-features --verbose

  # End-to-end simulation
  e2e-simulation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install mold linker
        run: |
          sudo apt-get update
          sudo apt-get install -y mold

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Setup npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Build all components
        run: |
          # Build Rust components
          cargo build --release --workspace
          
          # Build Web app
          cd manager-web
          npm ci
          npm run build
          cd ..



      - name: Validate configuration files
        run: |
          # Test Rust formatting
          cargo fmt --all --check
          
          # Test clippy
          cargo clippy --workspace --all-targets -- --deny warnings
          
          # Test Web linting (if dependencies are installed)
          cd manager-web
          if [ -f node_modules/.bin/eslint ]; then
            npm run lint
          fi
          cd ..

  # Security and compliance check
  security-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install security audit tools
        run: |
          cargo install cargo-audit --locked
          cargo install cargo-deny --locked

      - name: Run Rust security audit
        run: |
          cargo audit --deny warnings
          echo "Rust security audit passed"

      - name: Run dependency policy check
        run: |
          # Create basic cargo-deny configuration if it doesn't exist
          if [ ! -f deny.toml ]; then
            echo "Creating basic deny.toml configuration"
            cat > deny.toml << EOF
          [advisories]
          db-path = "~/.cargo/advisory-db"
          db-urls = ["https://github.com/rustsec/advisory-db"]
          ignore = []
          
          [licenses]
          allow = ["MIT", "Apache-2.0", "ISC", "BSD-3-Clause", "BSD-2-Clause", "CC0-1.0", "MPL-2.0"]
          deny = []
          
          [bans]
          multiple-versions = "warn"
          wildcards = "allow"
          
          [sources]
          unknown-registry = "warn"
          unknown-git = "warn"
          EOF
          fi
          
          cargo deny check || echo "Dependency policy check completed with warnings"

      - name: Run Web security audit
        working-directory: manager-web
        run: |
          npm ci
          npm audit --audit-level high || echo "Web security audit completed"

  # Performance and size check
  performance-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install mold linker
        run: |
          sudo apt-get update
          sudo apt-get install -y mold

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build optimized release
        run: |
          cargo build --release --workspace

      - name: Check binary sizes
        run: |
          echo "Binary sizes:"
          ls -lh target/release/nocodo-manager target/release/nocodo-services
          
          MANAGER_SIZE=$(stat -c%s target/release/nocodo-manager)
          SERVICES_SIZE=$(stat -c%s target/release/nocodo-services)
          
          echo "Manager size: $MANAGER_SIZE bytes"
          echo "Services size: $SERVICES_SIZE bytes"
          
          # Warn if binaries are unexpectedly large (>50MB)
          if [ $MANAGER_SIZE -gt 52428800 ]; then
            echo "Warning: Manager binary is larger than 50MB" 
          fi
          if [ $SERVICES_SIZE -gt 52428800 ]; then
            echo "Warning: Services binary is larger than 50MB"
          fi

      - name: Check Web bundle size
        working-directory: manager-web
        run: |
          npm ci
          npm run build
          
          echo "Web bundle contents:"
          du -sh dist/*
          
          BUNDLE_SIZE=$(du -sb dist | cut -f1)
          echo "Total bundle size: $BUNDLE_SIZE bytes"
          
          # Warn if bundle is unexpectedly large (>10MB)
          if [ $BUNDLE_SIZE -gt 10485760 ]; then
            echo "Warning: Web bundle is larger than 10MB"
          fi
