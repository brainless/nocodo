name: Manager CI

on:
  pull_request:
    paths:
      - 'cli/**'
      - 'manager/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.rustfmt.toml'
      - 'clippy.toml'
      - '.github/workflows/rust-ci.yml'
  push:
    branches: [main]
    paths:
      - 'cli/**'
      - 'manager/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.rustfmt.toml'
      - 'clippy.toml'
      - '.github/workflows/rust-ci.yml'
  schedule:
    # Run security audit weekly on Mondays at 08:00 UTC
    - cron: '0 8 * * 1'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Fast compilation check
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          # Cache key differentiation
          key: check-${{ hashFiles('**/Cargo.lock') }}
          # Cache workspace and registry
          workspaces: |
            .
            manager

      - name: Check workspace
        run: cargo check --workspace --all-targets --verbose

  # Code formatting verification
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all --check --verbose

  # Linting with Clippy
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: clippy-${{ hashFiles('**/Cargo.lock') }}
          workspaces: |
            .
            manager

      - name: Run Clippy
        run: cargo clippy --workspace --all-targets --all-features -- --deny warnings --verbose

  # Unit and integration tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable, beta]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
          workspaces: |
            .
            manager

      - name: Run tests
        run: cargo test --workspace --all-features --verbose

      - name: Run doctests
        run: cargo test --workspace --doc --verbose

  # Security vulnerability audit
  audit:
    runs-on: ubuntu-latest
    # Run on schedule or when dependencies change
    if: github.event_name == 'schedule' || contains(github.event.head_commit.modified, 'Cargo.toml') || contains(github.event.head_commit.modified, 'Cargo.lock')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run security audit
        run: cargo audit --deny warnings

  # Build release binaries
  build:
    runs-on: ubuntu-latest
    needs: [check, format, lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: build-${{ hashFiles('**/Cargo.lock') }}
          workspaces: |
            .
            manager

      - name: Build Manager in release mode
        run: cargo build --release --bin nocodo-manager --verbose

      - name: Upload Manager binary
        uses: actions/upload-artifact@v4
        with:
          name: nocodo-manager-${{ github.sha }}
          path: target/release/nocodo-manager
          retention-days: 7



  manager-tests:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'manager/') || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: manager-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Test Manager component
        working-directory: manager
        run: |
          cargo test --verbose
          cargo test --doc --verbose
